#!/bin/bash

#
#  All rights reserved (c) 2014-2024 CEA/DAM.
#
#  This file is part of Phobos.
#
#  Phobos is free software: you can redistribute it and/or modify it under
#  the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation, either version 2.1 of the License, or
#  (at your option) any later version.
#
#  Phobos is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Phobos. If not, see <http://www.gnu.org/licenses/>.
#

#
# Integration test for media
#

test_dir=$(dirname $(readlink -e $0))
. $test_dir/test_env.sh
. $test_dir/setup_db.sh
. $test_dir/test_launch_daemon.sh
. $test_dir/tape_drive.sh
. $test_dir/utils_generation.sh

################################################################################
#                                    SETUP                                     #
################################################################################

function setup()
{
    setup_tables
    if [[ -w /dev/changer ]]; then
        invoke_daemons
    else
        invoke_lrs
    fi
}

function cleanup() {
    if [[ -w /dev/changer ]]; then
        waive_daemons
        drain_all_drives
    else
        waive_lrs
    fi

    drop_tables
}

function setup_dir()
{
    setup
    umask 000
    setup_test_dirs

    $phobos dir add --unlock $DIR_TEST_IN $DIR_TEST_OUT
    $phobos dir format --fs POSIX --unlock $DIR_TEST_IN $DIR_TEST_OUT
}

function setup_dir_bis()
{
    setup
    setup_test_dirs

    $phobos dir add $DIR_TEST_IN --library lib1
    $phobos dir add $DIR_TEST_OUT --library lib2
}

function setup_tape()
{
    setup

    export drive="$(get_lto_drives 6 1)"
    export medium="$(get_tapes L6 1)"

    $phobos drive add --unlock $drive
    $phobos tape add -t lto6 $medium
    $phobos tape format --unlock $medium
}

function setup_tape_bis()
{
    setup
    export tapes=($(get_tapes L6 2 | nodeset -e))

    $phobos tape add -t lto6 ${tapes[0]} --library lib1
    $phobos tape add -t lto6 ${tapes[1]} --library lib2
}

function cleanup_dir()
{
    cleanup
    cleanup_test_dirs
}

function cleanup_tape()
{
    cleanup
}

################################################################################
#                         TEST MEDIA UPDATE WITH TAGS                          #
################################################################################

function test_put_update()
{
    local family=$1
    local media_name=$2
    local obj=$3

    # put first_tag on the media
    $valg_phobos $family update --tags first_tag $media_name

    # put an object asking a media tagged with "first_tag"
    $phobos put --family $family --tags first_tag /etc/hosts ${obj}1

    # put second_tag on the media when it is tagged with old first_tag
    $valg_phobos $family update --tags second_tag $media_name

    # put again one object using outdated tag and check it is updated
    $phobos put --family $family --tags first_tag /etc/hosts ${obj}2 &&
        error "Using an old tag to put should fail"
    return 0
}

function test_put_update_dir()
{
    test_put_update "dir" "$DIR_TEST_IN" "dir_obj"
}

function test_put_update_tape()
{
    test_put_update "tape" "$medium" "tape_obj"
}

################################################################################
#                     TEST UPDATE OF MEDIA OPERATION FLAGS                     #
################################################################################

function test_dir_operation_flags()
{
    local dir=$1
    local expected_put=$2
    local expected_get=$3
    local expected_delete=$4

    if [[ $($phobos dir list --output put_access $dir) != $expected_put ]]; then
        error "Error: $expected_put was expected for put operation flag for " \
              "$dir"
    fi

    if [[ $($phobos dir list --output get_access $dir) != $expected_get ]]; then
        error "Error: $expected_get was expected for get operation flag for " \
              "$dir"
    fi

    if [[ $($phobos dir list --output delete_access $dir) != \
        $expected_delete ]]; then
        error "Error: $expected_delete was expected for delete operation " \
              "flag for $dir"
    fi
}

function test_set_access_bad_syntax()
{
    $valg_phobos dir set-access p $DIR_TEST_IN &&
        error "p should be a bad FLAG"
    $valg_phobos dir set-access -- -PGJ $DIR_TEST_IN &&
        error "-PGJ should be a bad FLAG"
    return 0
}

function test_set_access()
{
    $valg_phobos dir set-access P $DIR_TEST_IN
    test_dir_operation_flags $DIR_TEST_IN True False False

    $valg_phobos dir set-access +G $DIR_TEST_IN
    test_dir_operation_flags $DIR_TEST_IN True True False

    $valg_phobos dir set-access -- -PD $DIR_TEST_IN
    test_dir_operation_flags $DIR_TEST_IN False True False

    $valg_phobos dir set-access +PD $DIR_TEST_IN
    test_dir_operation_flags $DIR_TEST_IN True True True
}

function test_put_access()
{
    # remove all dir put access
    $valg_phobos dir set-access -- -P $DIR_TEST_IN $DIR_TEST_OUT
    waive_lrs
    invoke_lrs

    # try one put without any dir put access
    $phobos put --family dir /etc/hosts host1 &&
        error "Put without any medium with 'P' operation flag should fail"

    # set one put access
    $valg_phobos dir set-access +P $DIR_TEST_OUT
    waive_lrs
    invoke_lrs

    # try to put with this new dir put access
    $phobos put --family dir /etc/hosts host2
    # check the used dir corresponds to the one with the put access
    if [[ $($phobos extent list --output media_name host2) != \
        "['$DIR_TEST_OUT']" ]]
    then
        error "Extent should be on the only medium with put access"
    fi
}

function test_get_access()
{
    # put a new object to get
    $phobos put --family dir /etc/hosts obj_to_get

    # remove all dir get access
    $valg_phobos dir set-access -- -G $DIR_TEST_IN $DIR_TEST_OUT
    waive_lrs
    invoke_lrs

    # try one get without any dir get access
    $phobos get obj_to_get /tmp/gotten_obj && rm /tmp/gotten_obj &&
        error "Get without any medium with 'G' operation flag should fail"

    # set get access on all dir
    $valg_phobos dir set-access +G $DIR_TEST_IN $DIR_TEST_OUT
    waive_lrs
    invoke_lrs

    # try to get
    $phobos get obj_to_get /tmp/gotten_obj && rm /tmp/gotten_obj
}

################################################################################
#                              TEST MEDIA LIST                                 #
################################################################################

function test_dir_list_library()
{
    local output=$($phobos dir list --library lib1)
    echo "$output" | grep "$DIR_TEST_IN" && ! echo "$output" | grep \
        "$DIR_TEST_OUT"

    output=$($phobos dir list --library lib2)
    echo "$output" | grep "$DIR_TEST_OUT" && ! echo "$output" | grep \
        "$DIR_TEST_IN"
}

function test_tape_list_library()
{
    local output=$($phobos tape list --library lib1)
    echo "$output" | grep "${tapes[0]}" && ! echo "$output" | grep \
        "${tapes[1]}"

    output=$($phobos tape list --library lib2)
    echo "$output" | grep "${tapes[1]}" && ! echo "$output" | grep \
        "${tapes[0]}"
}

TESTS=("setup_dir; \
            test_put_update_dir; \
            test_set_access_bad_syntax; \
            test_set_access; \
            test_put_access; \
            test_get_access; \
        cleanup_dir"
       "setup_dir_bis; \
            test_dir_list_library; \
        cleanup_dir")

if [[ -w /dev/changer ]]; then
    TESTS+=("setup_tape; test_put_update_tape; cleanup_tape"
            "setup_tape_bis; test_tape_list_library; cleanup_tape")
fi
