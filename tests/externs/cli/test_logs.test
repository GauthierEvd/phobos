#!/bin/bash

#
#  All rights reserved (c) 2014-2023 CEA/DAM.
#
#  This file is part of Phobos.
#
#  Phobos is free software: you can redistribute it and/or modify it under
#  the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation, either version 2.1 of the Licence, or
#  (at your option) any later version.
#
#  Phobos is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Phobos. If not, see <http://www.gnu.org/licenses/>.
#

#
# Integration test for SCSI logging
#

test_dir=$(dirname $(readlink -e $0))
. $test_dir/test_env.sh
. $test_dir/setup_db.sh
. $test_dir/test_launch_daemon.sh
. $test_dir/tape_drive.sh

if [[ ! -w /dev/changer ]]; then
    skip
fi

function setup
{
    export PHOBOS_STORE_default_family="tape"

    drain_all_drives
    setup_tables
    invoke_lrs
}

function cleanup
{
    waive_lrs
    drop_tables
    drain_all_drives
}

function clear_logs
{
    $valg_phobos logs clear || error "Logs clear should have succeeded"

    local logs=$($valg_phobos logs dump)
    if [[ $? != 0 ]]; then
        error "Log dumping failed with '$?'"
    fi

    if [[ ! -z "$logs" ]]; then
        error "Zero log should be available after a clear"
    fi
}

function check_logs
{
    local logs="$1"
    local drive_name="$2"
    local tape_name="$3"
    local cause="$4"

    local logs=$(echo "$logs" | grep "$drive_name" | grep "$tape_name" |
                 grep "$cause")

    local logs_lines=$(echo "$logs" | wc -l)
    if [ -z "$logs" ] || (( logs_lines != 1 )); then
        error "A '$cause' log concerning '$drive_name' and '$tape_name'" \
              "should have been recorded"
    fi
}

function test_device_load
{
    local lto6_tape=$(get_tapes L6 1)
    local lto6_drive=$(get_lto_drives 6 1)

    $phobos drive add --unlock $lto6_drive ||
        error "Drive $lto6_drive should have been added"

    $phobos tape add -t lto6 $lto6_tape ||
        error "Tape $lto6_tape should have been added"

    $valg_phobos tape format --unlock $lto6_tape ||
        error "Tape $lto6_tape should have been formated"

    local logs=$($valg_phobos logs dump)
    if [[ $? != 0 ]]; then
        error "Log dumping failed with '$?'"
    fi

    local logs_lines=$(echo "$logs" | wc -l)
    if [ -z "$logs" ] || (( logs_lines != 1 )); then
        error "Only one log should have been recorded"
    fi

    lto6_drive=$($phobos drive list -o name "$lto6_drive")

    check_logs "$logs" "$lto6_drive" "$lto6_tape" "Device load"

    clear_logs
}

function test_device_unload
{
    local lto6_tapes=($(get_tapes L6 2 | nodeset -e))
    local lto6_drive=$(get_lto_drives 6 1)
    local first_tape=${lto6_tapes[0]}
    local second_tape=${lto6_tapes[1]}

    $phobos drive add --unlock $lto6_drive ||
        error "Drive $lto6_drive should have been added"

    $phobos tape add -t lto6 $first_tape $second_tape ||
        error "Tape $first_tape should have been added"

    $valg_phobos tape format --unlock $first_tape ||
        error "Tape $first_tape should have been formated"

    clear_logs

    # This should generate a log for the unload and another for the load
    $valg_phobos tape format --unlock $second_tape ||
        error "Tape $second_tape should have been formated"

    local logs=$($valg_phobos logs dump)
    if [[ $? != 0 ]]; then
        error "Log dumping failed with '$?'"
    fi

    local logs_lines=$(echo "$logs" | wc -l)
    if [ -z "$logs" ] || (( logs_lines != 2 )); then
        error "Two logs should have been recorded"
    fi

    lto6_drive=$($phobos drive list -o name "$lto6_drive")

    check_logs "$logs" "$lto6_drive" "$first_tape" "Device unload"
    check_logs "$logs" "$lto6_drive" "$second_tape" "Device load"

    clear_logs
}

function test_filter
{
    local lto6_tapes=($(get_tapes L6 2 | nodeset -e))
    local lto6_drives=($(get_lto_drives 6 2 | nodeset -e))

    $phobos drive add --unlock ${lto6_drives[0]} ${lto6_drives[1]} ||
        error "Drives $lto6_drives should have been added"

    $phobos tape add -t lto6 ${lto6_tapes[0]} ${lto6_tapes[1]} ||
        error "Tapes $lto6_tapes should have been added"

    $valg_phobos tape format --unlock ${lto6_tapes[0]} ${lto6_tapes[1]} ||
        error "Tapes $lto6_tapes should have been formated"

    local logs=$($valg_phobos logs dump)
    if [[ $? != 0 ]]; then
        error "Log dumping failed with '$?'"
    fi

    local logs_lines=$(echo "$logs" | wc -l)
    if [ -z "$logs" ] || (( logs_lines != 2 )); then
        error "Two logs should have been recorded"
    fi

    lto6_drive=$($phobos drive list -o name "${lto6_drives[0]}")
    local logs=$($valg_phobos logs dump --drive $lto6_drive)
    if [[ $? != 0 ]]; then
        error "Log dumping failed with '$?'"
    fi

    local logs_lines=$(echo "$logs" | grep "$lto6_drive" | wc -l)
    if [ -z "$logs" ] || (( logs_lines != 1 )); then
        error "One log should have been recorded for drive $lto6_drive"
    fi

    local logs=$($valg_phobos logs dump --tape ${lto6_tapes[0]})
    if [[ $? != 0 ]]; then
        error "Log dumping failed with '$?'"
    fi

    local logs_lines=$(echo "$logs" | grep ${lto6_tapes[0]} | wc -l)
    if [ -z "$logs" ] || (( logs_lines != 1 )); then
        error "One log should have been recorded for tape ${lto6_tapes[0]}"
    fi
}

TESTS=("setup; test_device_load; cleanup"
       "setup; test_device_unload; cleanup"
       "setup; test_filter; cleanup")
