#!/bin/bash

#
#  All rights reserved (c) 2014-2024 CEA/DAM.
#
#  This file is part of Phobos.
#
#  Phobos is free software: you can redistribute it and/or modify it under
#  the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation, either version 2.1 of the Licence, or
#  (at your option) any later version.
#
#  Phobos is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Phobos. If not, see <http://www.gnu.org/licenses/>.
#

#
# Integration test for SCSI logging
#

test_dir=$(dirname $(readlink -e $0))
. $test_dir/test_env.sh
. $test_dir/setup_db.sh
. $test_dir/test_launch_daemon.sh
. $test_dir/tape_drive.sh

if [[ ! -w /dev/changer ]]; then
    skip
fi

function setup
{
    export PHOBOS_STORE_default_family="tape"

    drain_all_drives
    setup_tables
    invoke_daemons
}

function setup_bis
{
    export PHOBOS_STORE_default_family="tape"

    drain_all_drives
    setup_tables
    invoke_tlc_bis
    invoke_daemons
}

function cleanup
{
    waive_daemons
    drop_tables
    drain_all_drives
}

function cleanup_bis
{
    waive_daemons
    waive_tlc_bis
    drop_tables
    drain_all_drives
}

function clear_logs
{
    $valg_phobos logs clear --clear-all ||
        error "Logs clear should have succeeded"

    local logs=$($valg_phobos logs dump)
    if [[ $? != 0 ]]; then
        error "Log dumping failed with '$?'"
    fi

    if [[ ! -z "$logs" ]]; then
        error "Zero log should be available after a clear"
    fi
}

function check_number_of_logs
{
    local expected_number="$1"

    local logs=$($valg_phobos logs dump)
    if [[ $? != 0 ]]; then
        error "Log dumping failed with '$?'"
    fi

    local logs_lines=$(echo "$logs" | wc -l)
    if [ -z "$logs" ] || (( $logs_lines != $expected_number )); then
        error "'$expected_number' logs should should be recorded, found " \
              "'$logs_lines'"
    fi
}

function check_logs
{
    local logs="$1"
    local drive_name="$2"
    local tape_name="$3"
    local cause="$4"

    local logs=$(echo "$logs" | grep "$drive_name" | grep "$tape_name" |
                 grep "$cause")

    local logs_lines=$(echo "$logs" | wc -l)
    if [ -z "$logs" ] || (( logs_lines != 1 )); then
        error "A '$cause' log concerning '$drive_name' and '$tape_name'" \
              "should have been recorded"
    fi
}

function test_device_load
{
    local lto6_tape=$(get_tapes L6 1)
    local lto6_drive=$(get_lto_drives 6 1)

    $phobos drive add --unlock $lto6_drive ||
        error "Drive $lto6_drive should have been added"

    $phobos tape add -t lto6 $lto6_tape ||
        error "Tape $lto6_tape should have been added"

    $phobos tape format --unlock $lto6_tape ||
        error "Tape $lto6_tape should have been formated"

    check_number_of_logs 1

    local logs=$($valg_phobos logs dump)
    lto6_drive=$($phobos drive list -o name "$lto6_drive")

    check_logs "$logs" "$lto6_drive" "$lto6_tape" "Device load"

    clear_logs
}

function test_device_unload
{
    local lto6_tapes=($(get_tapes L6 2 | nodeset -e))
    local lto6_drive=$(get_lto_drives 6 1)
    local first_tape=${lto6_tapes[0]}
    local second_tape=${lto6_tapes[1]}

    $phobos drive add --unlock $lto6_drive ||
        error "Drive $lto6_drive should have been added"

    $phobos tape add -t lto6 $first_tape $second_tape ||
        error "Tape $first_tape should have been added"

    $phobos tape format --unlock $first_tape ||
        error "Tape $first_tape should have been formated"

    clear_logs

    # This should generate a log for the unload and another for the load
    $phobos tape format --unlock $second_tape ||
        error "Tape $second_tape should have been formated"

    check_number_of_logs 2

    local logs=$($valg_phobos logs dump)
    lto6_drive=$($phobos drive list -o name "$lto6_drive")

    check_logs "$logs" "$lto6_drive" "$first_tape" "Device unload"
    check_logs "$logs" "$lto6_drive" "$second_tape" "Device load"

    clear_logs
}

function _test_filter
{
    local verb="$1"
    local value="$2"
    local to_grep="$3"
    local expected_lines="$4"

    local logs=$($valg_phobos logs dump "$verb" "$value")
    if [[ $? != 0 ]]; then
        error "Log dumping failed with '$?'"
    fi

    local logs_lines=$(echo "$logs" | grep "$to_grep" | wc -l)
    if [ -z "$logs" ] || (( $logs_lines != $expected_lines )); then
        error "$expected_lines logs should have been recorded for $verb " \
            "$value (found $(echo $log_lines | grep "$to_grep" | wc -l))"
    fi

    echo "$logs"
}

function test_dump_filters
{
    local lto6_tapes=($(get_tapes L6 3 | nodeset -e))
    local lto6_drives=($(get_lto_drives 6 2 | nodeset -e))
    local lto6_tape_bis=$(get_tapes_bis L6 1)
    local lto6_drive_bis=$(get_lto_drives_bis 6 1)

    $phobos drive add --unlock ${lto6_drives[0]} ${lto6_drives[1]} ||
        error "Drives $lto6_drives should have been added"

    $phobos tape add -t lto6 ${lto6_tapes[0]} ${lto6_tapes[1]} ||
        error "Tapes $lto6_tapes should have been added"

    $phobos tape format --unlock ${lto6_tapes[0]} ${lto6_tapes[1]} ||
        error "Tapes $lto6_tapes should have been formated"

    check_number_of_logs 2

    local lto6_drive=$($phobos drive list -o name "${lto6_drives[0]}")
    _test_filter "--drive" "$lto6_drive" "$lto6_drive" 1
    _test_filter "--tape" "${lto6_tapes[0]}" "${lto6_tapes[0]}" 1
    _test_filter "--errno" 0 "succeeded" 2

    sleep 1
    $phobos tape add -t lto6 ${lto6_tapes[2]} ||
        error "Tape ${lto6_tapes[2]} should have been added"

    $phobos tape format --unlock ${lto6_tapes[2]} ||
        error "Tape ${lto6_tapes[2]} should have been formated"

    _test_filter "--cause" "device_unload" "unload" 1

    local date=$($phobos logs dump | tail -n 2 | head -n 1 | cut -d'>' -f1 |
                                     cut -d'<' -f2 | cut -d'.' -f1)
    local old_date=$(date +%s --date="$date UTC")

    _test_filter "--start" "$date" "" 2

    local new_date=$($phobos logs dump --start "$date" | head -n 1 |
                                                         cut -d'>' -f1 |
                                                         cut -d'<' -f2)
    new_date=$(date +%s --date="$new_date UTC")
    if [[ $new_date < $old_date ]]; then
        error "Logs returned should be posterior to or at '$old_date', found " \
              "them after $new_date"
    fi

    date=$($phobos logs dump | head -n 2 | tail -n 1 | cut -d'>' -f1 |
                               cut -d'<' -f2 | cut -d'.' -f1)
    old_date=$(date +%s --date="$date UTC")
    date=$(date "+%Y-%m-%d %H:%M:%S" --date="@$old_date")

    _test_filter "--end" "$date" "" 2

    new_date=$($phobos logs dump --end "$date" | tail -n 1 | cut -d'>' -f1 |
                                                 cut -d'<' -f2)
    new_date=$(date +%s --date="$new_date UTC")

    if [[ $new_date > $old_date ]]; then
        error "Logs returned should be prior to or at '$old_date', found " \
              "them at '$new_date'"
    fi

    # Test library dump filter
    $phobos drive add --unlock --library library_bis ${lto6_drive_bis} ||
        error "Drive $lto6_drive_bis should have been added"

    $phobos tape add -t lto6 --library library_bis ${lto6_tape_bis} ||
        error "Tape ${lto6_tape_bis} should have been added"

    $phobos tape format --unlock --library library_bis ${lto6_tape_bis} ||
        error "Tapes $lto6_tape_bis should have been formated"

    _test_filter "--library" "library_bis" "${lto6_tape_bis}" 1

    clear_logs
}

function test_clear_filters
{
    local lto6_tapes=($(get_tapes L6 4 | nodeset -e))
    local lto6_drives=($(get_lto_drives 6 1 | nodeset -e))
    local lto6_tape_bis=$(get_tapes_bis L6 1)
    local lto6_drive_bis=$(get_lto_drives_bis 6 1)

    $phobos drive add --unlock ${lto6_drives[0]} ||
        error "Drive ${lto6_drives[0]} should have been added"

    $phobos tape add -t lto6 ${lto6_tapes[0]} ${lto6_tapes[1]} \
        ${lto6_tapes[2]} ${lto6_tapes[3]}||
        error "Tapes $lto6_tapes should have been added"

    $phobos tape format --unlock ${lto6_tapes[0]} ||
        error "Tape ${lto6_tapes[0]} should have been formated"

    $phobos tape format --unlock ${lto6_tapes[1]} ||
        error "Tape ${lto6_tapes[1]} should have been formated"

    # 3 logs are created, 2 load, 1 unload, 2 for tape lto6_tapes[0] and 1 for
    # lto6_tapes[1]
    check_number_of_logs 3

    $valg_phobos logs clear --cause device_unload ||
        error "Logs for cause 'device_unload' should have been cleared"

    # The unload log has been cleared
    check_number_of_logs 2

    $valg_phobos logs clear --tape ${lto6_tapes[0]} ||
        error "Logs for tape '${lto6_tapes[0]}' should have been cleared"

    # The last log about lto6_tapes[0] has been cleared
    check_number_of_logs 1

    local now=$(date "+%Y-%m-%d %H:%M:%S")

    sleep 1
    $phobos tape format --unlock ${lto6_tapes[2]} ||
        error "Tape ${lto6_tapes[2]} should have been formated"

    # Back at 3 logs, same configuration as at the start but for lto6_tapes[1]
    # and lto6_tapes[2]
    $valg_phobos logs clear --end "$now" ||
        error "Logs before '$now' should have been cleared"

    # The load log about lto6_tapes[1] has been cleared
    check_number_of_logs 2

    $valg_phobos logs clear --start "$now" --errno 0 ||
        error "Logs after '$now' and with errno '0' should have been cleared"

    # The last two logs have been cleared
    if [ ! -z "$($valg_phobos logs dump)" ]; then
        error "No log should still be recorded"
    fi

    $phobos tape format --unlock ${lto6_tapes[3]} ||
        error "Tape ${lto6_tapes[3]} should have been formated"

    check_number_of_logs 2

    $valg_phobos logs clear --cause device_unload --clear-all ||
        error "Logs for cause 'device_unload' should have been cleared"

    # The unload log has been cleared, but not the other one, even though
    # --clear-all is present
    check_number_of_logs 1

    # Test library clear filter
    $phobos drive add --unlock --library library_bis ${lto6_drive_bis} ||
        error "Drive $lto6_drive_bis should have been added"

    $phobos tape add -t lto6 --library library_bis ${lto6_tape_bis} ||
        error "Tape ${lto6_tape_bis} should have been added"

    $phobos tape format --unlock --library library_bis ${lto6_tape_bis} ||
        error "Tapes $lto6_tape_bis should have been formated"

    $valg_phobos logs clear --library library_bis ||
        error "Logs for library 'library_bis' should have been cleared"
    check_number_of_logs 1

    $valg_phobos logs clear --clear-all ||
        error "All logs should have been cleared using --clear-all"

    # The last log has been cleared
    if [ ! -z "$($valg_phobos logs dump)" ]; then
        error "No log should still be recorded"
    fi

    # Create an error
    $phobos put -f tape /etc/hosts blob
    umount $($phobos drive status -o mount_path,name | grep ${lto6_drives[0]} |
             cut -d' ' -f2)
    $phobos drive unload ${lto6_drives[0]} &&
        error "phobos drive unload should have failed"
    # Add a successfull log
    $phobos drive load ${lto6_drives[0]} ${lto6_tapes[3]}

    $valg_phobos logs clear --errors --errno 4 &&
        error "phobos logs clear should have failed"

    $valg_phobos logs clear --errors ||
        error "Logs for all errors should have been cleared"

    check_number_of_logs 1
    $valg_phobos logs clear --clear-all ||
        error "All logs should have been cleared using --clear-all"

    # The last log has been cleared
    if [ ! -z "$($valg_phobos logs dump)" ]; then
        error "No log should still be recorded"
    fi
}

TESTS=("setup; test_device_load; cleanup"
       "setup; test_device_unload; cleanup"
       "setup_bis; test_dump_filters; cleanup_bis"
       "setup_bis; test_clear_filters; cleanup_bis")
