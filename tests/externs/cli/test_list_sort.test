#!/bin/bash

#
#  All rights reserved (c) 2014-2024 CEA/DAM.
#
#  This file is part of Phobos.
#
#  Phobos is free software: you can redistribute it and/or modify it under
#  the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation, either version 2.1 of the License, or
#  (at your option) any later version.
#
#  Phobos is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Phobos. If not, see <http://www.gnu.org/licenses/>.
#

#
# Test sorting option with drive list

test_dir=$(dirname $(readlink -e $0))
. $test_dir/test_env.sh
. $test_dir/setup_db.sh
. $test_dir/test_launch_daemon.sh
. $test_dir/tape_drive.sh

DIR="/tmp/pho_testdir1 /tmp/pho_testdir2 /tmp/pho_testdir3 \
     /tmp/pho_testdir4 /tmp/pho_testdir5"

function setup
{
    setup_tables
    if [[ -w /dev/changer ]]; then
        invoke_daemons
    else
        invoke_lrs
    fi
}

function cleanup
{
    if [[ -w /dev/changer ]]; then
        waive_daemons
    else
        waive_lrs
    fi

    drop_tables
    if [[ -w /dev/changer ]]; then
        drain_all_drives
    fi
}

function exp_sort
{
    local type=$1
    local attr=$2
    local operator=$3

    if [[ $operator == "--sort" ]]; then
        $phobos $type list -o $attr | sort
    else
        $phobos $type list -o $attr | sort -r
    fi
}

function drives_setup
{
    setup
    local drives_lto5="$(get_lto_drives 5 2)"
    local drives_lto6="$(get_lto_drives 6 2)"

    $phobos drive add ${drives_lto5} ${drives_lto6}

    $phobos drive unlock ${drives_lto5}
    sleep 1
    $phobos drive unlock ${drives_lto6}
}

function media_setup
{
    setup

    mkdir -p $DIR
    $phobos dir add $DIR
    $phobos dir unlock "/tmp/pho_testdir1" "/tmp/pho_testdir2"
    sleep 1
    $phobos dir unlock "/tmp/pho_testdir3" "/tmp/pho_testdir4" \
                       "/tmp/pho_testdir5"
    $PSQL << EOF
UPDATE media SET stats = '{"nb_obj":5, "logc_spc_used":0, "phys_spc_used":0,\
                           "phys_spc_free":0, "nb_load":0, "nb_errors":0,\
                           "last_load":0}'
    WHERE id = '/tmp/pho_testdir1';
EOF

    $PSQL << EOF
UPDATE media SET stats = '{"nb_obj":1, "logc_spc_used":0, "phys_spc_used":0,\
                           "phys_spc_free":0, "nb_load":0, "nb_errors":0,\
                           "last_load":0}'
    WHERE id = '/tmp/pho_testdir2';
EOF

    $PSQL << EOF
UPDATE media SET stats = '{"nb_obj":9, "logc_spc_used":0, "phys_spc_used":0,\
                           "phys_spc_free":0, "nb_load":0, "nb_errors":0,\
                           "last_load":0}'
    WHERE id = '/tmp/pho_testdir5';
EOF

}

function media_cleanup
{
    cleanup
    for d in $DIR; do
        rm -rf $d
    done
}

function object_setup
{
    setup

    mkdir "/tmp/pho_testdir"
    $phobos dir add "/tmp/pho_testdir"
    $phobos dir format --unlock "/tmp/pho_testdir"

    $phobos put -f dir /etc/hosts oid1
    $phobos put -f dir /etc/hosts oid2
    $phobos put -f dir /etc/hosts oid3
}

function object_cleanup
{
    cleanup
    rm -rf "/tmp/pho_testdir"
}

function extent_setup
{
    setup
    mkdir -p $DIR

    truncate --size 1k /tmp/1K
    truncate --size 2k /tmp/2K
    truncate --size 3K /tmp/3K
    truncate --size 1M /tmp/1M

    $phobos dir add $DIR
    $phobos dir format --unlock $DIR

    $phobos put -f dir /tmp/1K 1K
    $phobos put -f dir /tmp/3K 3K
    $phobos put -f dir --lyt-param repl_count=2 /tmp/2K 2K
    $phobos put -f dir /tmp/1M 1M
}

function extent_cleanup
{
    media_cleanup
    for f in "/tmp/1K" "/tmp/2K" "/tmp/3K" "/tmp/1M"; do
        rm -f "$f"
    done
}

function test_sort
{
    local resource=$1
    local operator=$2
    local attr=$3
    local exp=$4

    if [ -z "$exp" ]; then
        exp=$(exp_sort "$resource" "$attr" "$operator")
    fi

    local res=$($phobos $resource list -o $attr $operator $attr)
    if [ "$res" != "$exp" ]; then
        error "phobos $resource list -o $attr $operator $attr output is" \
              "different than expected: $exp"
    fi
}

function test_multiple_output
{
    local resource=$1
    local operator=$2
    local output_1=$4
    local output_2=$5
    local attr=$3

    local res_1=$($phobos $resource list -f xml -o $output_1 $operator $attr)
    local res_2=$($phobos $resource list -f xml -o $output_2 $operator $attr)

    if [ "$res" != "$exp" ]; then
        error "phobos $resource list -o $output_1 $operator $attr output is" \
              "different than phobos $resource list -o $ouput_2 $operator $attr"
    fi
}

function test_drive_list_sort
{
    test_sort "drive" "--sort" "name"
    test_sort "drive" "--sort" "path"
    test_sort "drive" "--sort" "lock_ts"
    test_multiple_output "drive" "--sort" "path" "name,model,path" \
                         "path,name,model"
}

function test_drive_list_rsort
{
    test_sort "drive" "--rsort" "name"
    test_sort "drive" "--rsort" "path"
    test_sort "drive" "--rsort" "lock_ts"
    test_multiple_output "drive" "--rsort" "path" "name,model,path" \
                         "path,name,model"
}

function test_media_list_sort
{
    test_sort "dir" "--sort" "name"
    test_sort "dir" "--sort" "lock_ts"
    test_sort "dir" "--sort" "stats.nb_obj"
    test_multiple_output "dir" "--sort" "name" "name,lock_ts,stats.nb_obj" \
                         "stats.nb_obj,name,lock_ts"
}

function test_media_list_rsort
{
    test_sort "dir" "--rsort" "name"
    test_sort "dir" "--rsort" "lock_ts"
    test_sort "dir" "--rsort" "stats.nb_obj"
    test_multiple_output "dir" "--rsort" "name" "name,lock_ts,stats.nb_obj" \
                         "stats.nb_obj,name,lock_ts"
}

function test_object_list_sort
{
    test_sort "object" "--sort" "uuid"
    test_sort "object" "--sort" "oid"
    test_sort "object" "--sort" "creation_time"
    test_multiple_output "object" "--sort" "oid" "oid,uuid,creation_time" \
                         "creation_time,oid,uuid"
}

function test_object_list_rsort
{
    test_sort "object" "--rsort" "uuid"
    test_sort "object" "--rsort" "oid"
    test_sort "object" "--rsort" "creation_time"
    test_multiple_output "object" "--rsort" "oid" "oid,uuid,creation_time" \
                         "creation_time,oid,uuid"
}

function test_extent_list_sort
{
    test_sort "extent" "--sort" "oid"
    test_sort "extent" "--sort" "ext_count"
    test_sort "extent" "--sort" "size" $'[1024]\n[3072]\n[2048, 2048]\n[1048576]'
    test_multiple_output "extent" "--sort" "size" "oid,ext_count,size" \
                         "size,oid,ext_count"
}

function test_extent_list_rsort
{
    test_sort "extent" "--rsort" "oid"
    test_sort "extent" "--rsort" "ext_count"
    test_sort "extent" "--rsort" "size" $'[1048576]\n[2048, 2048]\n[3072]\n[1024]'
    test_multiple_output "extent" "--rsort" "size" "oid,ext_count,size" \
                         "size,oid,ext_count"
}

TESTS=("media_setup; \
            test_media_list_sort; test_media_list_rsort; \
        media_cleanup"
       "object_setup; \
            test_object_list_sort; test_object_list_rsort; \
        object_cleanup"
       "extent_setup; \
            test_extent_list_sort; test_extent_list_rsort; \
        extent_cleanup")

if [[ -w /dev/changer ]]; then
    TESTS+=("drives_setup; test_drive_list_sort; cleanup"
            "drives_setup; test_drive_list_rsort; cleanup")
fi
