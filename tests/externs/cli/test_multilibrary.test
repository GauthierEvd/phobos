#!/bin/bash

#
#  All rights reserved (c) 2014-2024 CEA/DAM.
#
#  This file is part of Phobos.
#
#  Phobos is free software: you can redistribute it and/or modify it under
#  the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation, either version 2.1 of the License, or
#  (at your option) any later version.
#
#  Phobos is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Phobos. If not, see <http://www.gnu.org/licenses/>.
#

#
# Integration test for "multi-library" feature
#

test_dir=$(dirname $(readlink -e $0))
. $test_dir/test_env.sh
. $test_dir/test_launch_daemon.sh
. $test_dir/setup_db.sh
. $test_dir/tape_drive.sh
. $test_dir/utils_generation.sh

function cleanup_daemons
{
    waive_lrs
    waive_tlc
    waive_tlc_bis
    drop_tables
    drain_all_drives
    cleanup_dummy_files
}

function setup_daemons
{
    drain_all_drives
    setup_tables
    invoke_tlc
    invoke_tlc_bis
    invoke_lrs
    setup_dummy_files 2 1k 1
}

function test_device_add_library
{
    local drive="$(get_lto_drives 6 1)"

    # Default library value from conf 'legacy'
    $phobos drive add ${drive}
    library="$($phobos drive list -o library ${drive})"
    if [[ "${library}" != "legacy" ]]; then
        error "A drive added withouth library option must have the default" \
              "'legacy' library, instead we got ${library}"
    fi

    $phobos drive del ${drive}

    # Set a library value when adding a new drive
    $phobos drive add --library "new_one" ${drive}
    library="$($phobos drive list -o library ${drive})"
    if [[ "${library}" != "new_one" ]]; then
        error "A drive added with 'new_one' library option must have the" \
              "'new_one' library, instead we got ${library}"
    fi

    $phobos drive del --library "new_one" ${drive}
}

function test_tape_add_library
{
    local tapes=( $(get_tapes L6 2 | nodeset -e) )

    # Default library value from conf 'legacy'
    $phobos tape add -t lto6 ${tapes[0]}
    library="$($phobos tape list -o library ${tapes[0]})"
    if [[ "${library}" != "legacy" ]]; then
        error "A tape added withouth library option must have the default" \
              "'legacy' library, instead we got ${library}"
    fi

    # Set a library value when adding a new tape
    $phobos tape add -t lto6 --library "new_one" ${tapes[1]}
    library="$($phobos tape list -o library ${tapes[1]})"
    if [[ "${library}" != "new_one" ]]; then
        error "A tape added with 'new_one' library option must have the" \
              "'new_one' library, instead we got ${library}"
    fi
}

function test_tlc_daemon_bad_library
{
    if invoke_tlc -l bad_library; then
        waive_tlc
        error "TLC daemon start must fail if we set a bad library parameter"
    fi
}

function test_put_library_bis
{
    local tape_bis=$(get_tapes_bis L6 1)
    local drive_bis="$(get_lto_drives_bis 6 1)"

    $phobos drive add --unlock --library library_bis ${drive_bis}
    $phobos tape add -t lto6 --library library_bis ${tape_bis}
    $phobos tape format --unlock --library library_bis ${tape_bis}
    $phobos put ${FILES[0]} obj_on_bis
    rm ${FILES[1]}
    $phobos get obj_on_bis ${FILES[1]}
    if ! diff ${FILES[0]} ${FILES[1]}; then
        error "put/get on library_bis produces different files"
    fi
}

function test_get_lib_bis_tape_on_legacy_drive
{
    local tape_bis=$(get_tapes_bis L6 1)
    local drive="$(get_lto_drives 6 1)"
    local drive_bis="$(get_lto_drives_bis 6 1)"

    $phobos drive add --unlock --library library_bis ${drive_bis}
    $phobos tape add -t lto6 --library library_bis ${tape_bis}
    $phobos tape format --unlock --library library_bis ${tape_bis}
    $phobos put ${FILES[0]} obj_on_bis
    rm ${FILES[1]}
    $phobos get obj_on_bis ${FILES[1]}

    $phobos drive lock --wait --library library_bis ${drive_bis}
    $phobos drive add --unlock --library legacy ${drive}
    rm ${FILES[1]}
    set +e
    $phobos get obj_on_bis ${FILES[1]}
    rc=$?
    set -e
    ENODEV="19"
    if [[ ${rc} != ${ENODEV} ]]; then
        error "Getting on library bis with only a drive on legacy must fail "\
"with ENODEV (${ENODEV}), instead we got ${rc}."
    fi
}

function test_put_legacy_with_lib_bis_drive_umounted_medium
{
    local tape_bis=$(get_tapes_bis L6 1)
    local drive="$(get_lto_drives 6 1)"
    local drive_bis="$(get_lto_drives_bis 6 1)"

    $phobos drive add --unlock --library library_bis ${drive_bis}
    $phobos tape add -t lto6 --library library_bis ${tape_bis}
    $phobos tape format --unlock --library library_bis ${tape_bis}
    $phobos drive add --unlock --library legacy ${drive}
    waive_lrs
    waive_tlc
    waive_tlc_bis
    drain_all_drives
    invoke_tlc
    invoke_tlc_bis
    invoke_lrs
    # put on legacy with a legacy drive but without any library medium
    # with a library_bis tape and an empty library_bis drive
    set +e
    $phobos put --library legacy ${FILES[0]} obj_on_legacy
    rc=$?
    set -e
    ENOSPC="28"
    if [[ ${rc} != ${ENOSPC} ]]; then
        error "Putting on legacy with no legacy medium and no other mounted "\
"medium must fail with ENOSPC (${ENOSPC}), instead we got ${rc}."
    fi
}

function test_put_legacy_with_lib_bis_drive_mounted_medium
{
    local tape_bis=$(get_tapes_bis L6 1)
    local drive="$(get_lto_drives 6 1)"
    local drive_bis="$(get_lto_drives_bis 6 1)"

    $phobos drive add --unlock --library library_bis ${drive_bis}
    $phobos tape add -t lto6 --library library_bis ${tape_bis}
    $phobos tape format --unlock --library library_bis ${tape_bis}
    $phobos drive add --unlock --library legacy ${drive}
    $phobos put --library library_bis ${FILES[0]} obj_on_library_bis
    # put on legacy with a legacy drive but without any legacy medium
    # with a library_bis tape and an empty library_bis drive
    set +e
    $phobos put --library legacy ${FILES[0]} obj_on_legacy
    rc=$?
    set -e
    ENOSPC="28"
    if [[ ${rc} != ${ENOSPC} ]]; then
        error "Putting on legacy drive with no legacy medium and an other "\
"mounted library_bis medium must fail with ENOSPC (${ENOSPC}), instead we "\
"got ${rc}."
    fi
}

if [[ ! -w /dev/changer ]]; then
    skip "Tapes are required for this test"
fi

TESTS=("setup_tables; test_device_add_library; drop_tables"
       "setup_tables; test_tape_add_library; drop_tables"
       "setup_tables; test_tlc_daemon_bad_library; drop_tables"
       "setup_daemons; test_put_library_bis; cleanup_daemons"
       "setup_daemons; test_get_lib_bis_tape_on_legacy_drive; cleanup_daemons"
       "setup_daemons; test_put_legacy_with_lib_bis_drive_umounted_medium; "\
           "cleanup_daemons"
       "setup_daemons; test_put_legacy_with_lib_bis_drive_mounted_medium; "\
           "cleanup_daemons")
