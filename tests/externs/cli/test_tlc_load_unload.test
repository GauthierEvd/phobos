#!/bin/bash

#
#  All rights reserved (c) 2014-2023 CEA/DAM.
#
#  This file is part of Phobos.
#
#  Phobos is free software: you can redistribute it and/or modify it under
#  the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation, either version 2.1 of the License, or
#  (at your option) any later version.
#
#  Phobos is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Phobos. If not, see <http://www.gnu.org/licenses/>.
#

#
# Integration test for "phobos drive load" feature
#

test_dir=$(dirname $(readlink -e $0))
. $test_dir/test_env.sh
. $test_dir/setup_db.sh
. $test_dir/test_launch_daemon.sh
. $test_dir/tape_drive.sh

set -xe

function setup
{
    setup_tables
    drain_all_drives
}

function cleanup
{
    waive_tlc
    drop_tables
    drain_all_drives
}

function cleanup_also_lrs
{
    waive_lrs
    cleanup
}

function test_load
{
    local tape="$(get_tapes L6 1)"
    local drive="$(get_lto_drives 6 1)"

    $phobos tape add -t lto6 ${tape}

    # no TLC
    ECONNREFUSED=111
    set +e
    $phobos drive load ${drive} ${tape}
    rc=$?
    set -e
    if (( rc != ECONNREFUSED )); then
        error "phobos drive load no TLC must failed with ECONNREFUSED" \
              "($ECONNREFUSED), instead we got ${rc}"
    fi

    # unknown drive
    invoke_tlc
    ENXIO=6
    set +e
    $phobos drive load ${drive} ${tape}
    rc=$?
    set -e
    if (( rc != ENXIO )); then
        error "phobos drive load for drive unknown by DSS must failed with" \
              "ENXIO ($ENXIO), instead we got ${rc}"
    fi

    # fake drive into dss but not on the TLC
    $PSQL << EOF
    INSERT INTO device (family, model, id, host, adm_status, path)
           VALUES ('tape', NULL, 'serial', '$host', 'unlocked',
                   'path');
EOF

    # by serial
    ENOENT=2
    set +e
    $phobos drive load serial ${tape}
    rc=$?
    set -e
    if (( rc != ENOENT )); then
        error "phobos drive load serial for TLC unknown drive must failed" \
              "with ENOENT ($ENOENT), instead we got ${rc}"
    fi
    # by path
    set +e
    $phobos drive load path ${tape}
    rc=$?
    set -e
    if (( rc != ENOENT )); then
        error "phobos drive load path for TLC unknown drive must failed" \
              "with ENOENT ($ENOENT), instead we got ${rc}"
    fi

    $PSQL << EOF
    DELETE FROM device WHERE id = 'serial';
EOF

    $phobos drive add --unlock ${drive}

    # unknown tape
    set +e
    $phobos drive load ${drive} unknown_tape
    rc=$?
    set -e
    if (( rc != ENOENT )); then
        error "phobos drive load for unknown tape must failed" \
              "with ENOENT ($ENOENT), instead we got ${rc}"
    fi

    # load tape into drive
    $phobos drive load ${drive} ${tape}
    drive_lookup_out=$($phobos drive lookup ${drive} 2>&1)
    echo ${drive_lookup_out} | grep "State: full"
    echo ${drive_lookup_out} | grep "Loaded tape id: ${tape}"
}

function test_load_drive_to_drive
{
    local tape="$(get_tapes L6 1)"
    local drives=( $(get_lto_drives 6 2) )

    invoke_tlc
    $phobos tape add -t lto6 ${tape}
    $phobos drive add --unlock ${drives[0]}
    $phobos drive add --unlock ${drives[1]}

    # load tape into drives[0]
    $phobos drive load ${drives[0]} ${tape}
    drive_lookup_out=$($phobos drive lookup ${drives[0]} 2>&1)
    echo ${drive_lookup_out} | grep "State: full"
    echo ${drive_lookup_out} | grep "Loaded tape id: ${tape}"

    # load tape into drives[1] from drives[1]
    $phobos drive load ${drives[1]} ${tape}
    $phobos drive lookup ${drives[0]} 2>&1 | grep "State: empty"
    drive_lookup_out=$($phobos drive lookup ${drives[1]} 2>&1)
    echo ${drive_lookup_out} | grep "State: full"
    echo ${drive_lookup_out} | grep "Loaded tape id: ${tape}"
}

function test_unload
{
    local tape="$(get_tapes L6 1)"
    local drive="$(get_lto_drives 6 1)"

    $phobos tape add -t lto6 ${tape}

    # no TLC
    ECONNREFUSED=111
    set +e
    $phobos drive unload ${drive}
    rc=$?
    set -e
    if (( rc != ECONNREFUSED )); then
        error "phobos drive unload no TLC must failed with ECONNREFUSED" \
              "($ECONNREFUSED), instead we got ${rc}"
    fi

    # unknown drive
    invoke_tlc
    ENXIO=6
    set +e
    $phobos drive unload ${drive}
    rc=$?
    set -e
    if (( rc != ENXIO )); then
        error "phobos drive unload for drive unknown by DSS must failed with" \
              "ENXIO ($ENXIO), instead we got ${rc}"
    fi

    # fake drive into dss but not on the TLC
    $PSQL << EOF
    INSERT INTO device (family, model, id, host, adm_status, path)
           VALUES ('tape', NULL, 'serial', '$host', 'unlocked',
                   'path');
EOF

    # by serial
    ENOENT=2
    set +e
    $phobos drive unload serial
    rc=$?
    set -e
    if (( rc != ENOENT )); then
        error "phobos drive unload serial for TLC unknown drive must failed" \
              "with ENOENT ($ENOENT), instead we got ${rc}"
    fi

    $PSQL << EOF
    DELETE FROM device WHERE id = 'serial';
EOF

    # Add the drive
    $phobos drive add --unlock ${drive}

    # Unload an empty drive
    $phobos drive unload ${drive}

    # load tape into drive
    $phobos drive load ${drive} ${tape}
    drive_lookup_out=$($phobos drive lookup ${drive} 2>&1)
    echo ${drive_lookup_out} | grep "State: full"
    echo ${drive_lookup_out} | grep "Loaded tape id: ${tape}"

    # unload drive
    $phobos drive unload ${drive}
    drive_lookup_out=$($phobos drive lookup ${drive} 2>&1)
    echo ${drive_lookup_out} | grep "State: empty"

    # load tape into drive
    $phobos drive load ${drive} ${tape}

    # unload drive with a tape label
    $phobos drive unload --tape-label ${tape} ${drive}
    drive_lookup_out=$($phobos drive lookup ${drive} 2>&1)
    echo ${drive_lookup_out} | grep "State: empty"
}

function test_load_lock
{
    local tape="$(get_tapes L6 1)"
    local drive="$(get_lto_drives 6 1)"

    # Add drive and tape
    $phobos drive add --unlock ${drive}
    $phobos tape add -t lto6 ${tape}

    # start tlc
    invoke_tlc

    # start LRS to lock the drive
    invoke_lrs

    # load again tape into drive
    EALREADY=114
    set +e
    $phobos drive load ${drive} ${tape}
    rc=$?
    set -e
    if (( rc != EALREADY )); then
        error "phobos drive load for TLC with drive lock by LRS must fail" \
              "with EALREADY ($EALREADY), instead we got ${rc}"
    fi
}

if [[ ! -w /dev/changer ]]; then
    skip "Library required for this test"
fi

TESTS=(
    "setup; test_load; cleanup"
    "setup; test_load_drive_to_drive; cleanup"
    "setup; test_unload; cleanup"
    "setup; test_load_lock; cleanup_also_lrs"
)
