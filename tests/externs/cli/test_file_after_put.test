#!/bin/bash

#
#  All rights reserved (c) 2014-2023 CEA/DAM.
#
#  This file is part of Phobos.
#
#  Phobos is free software: you can redistribute it and/or modify it under
#  the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation, either version 2.1 of the Licence, or
#  (at your option) any later version.
#
#  Phobos is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Phobos. If not, see <http://www.gnu.org/licenses/>.
#

test_dir=$(dirname $(readlink -e $0))
. $test_dir/test_env.sh
. $test_dir/setup_db.sh
. $test_dir/test_launch_daemon.sh
. $test_dir/tape_drive.sh

max_repl_count=3

function dirs_setup
{
    setup
    dirs=""
    for i in $(seq 1 $max_repl_count); do
        dirs="$dirs $(mktemp -d /tmp/test.pho.XXXX)"
    done

    $phobos dir add $dirs ||
        error "Dirs should have been added"
    $phobos dir format --fs posix --unlock $dirs ||
        error "Dirs should have been formated"
}

function tapes_setup
{
    setup
    drives="$(get_lto_drives 5 $max_repl_count | nodeset -f)"
    tapes="$(get_tapes L5 $max_repl_count)"

    for drive in $(nodeset -e "${drives}"); do
        $phobos drive add --unlock "$drive" ||
            error "Drive ${drive} should have been added"
    done

    for tape in $(nodeset -e "${tapes}"); do
        $phobos tape add -t lto5 "${tape}" ||
            error "Tape ${tape} should have been added"
        $phobos tape format --unlock "${tape}" ||
            error "Tape ${tape} should have been formated"
    done
}

function setup
{
    setup_tables
    invoke_lrs
}

function cleanup
{
    waive_lrs
    drop_tables
    rm -rf $dirs
    drain_all_drives
}

function hash_compare
{
    if [[ "$1" != *"None"* ]]; then
        if [[ "$2" == "" ]]; then
            error "Object hash not set"
        elif [[ "$2" != "$1" ]]; then
            error "Object hashs not equal"
        fi
    fi
}

function get_media_path
{
    local repl_count="$1"
    local family="$2"
    local media_name="$3"

    if [[ "$family" == "dir" ]]; then
        echo $media_name
    elif [[ "$family" == "tape" ]]; then
        # finding mount path for the corresponding extent
        for i in $(seq 1 $repl_count); do
            local drive_status="$($phobos drive status |
                sed "$((2+i))q;d" | sed "s/[ ]//g")"
            if [[ "$(echo $drive_status | cut -d'|' -f5)" == \
                  "$(echo $media_name)" ]]; then
                echo $drive_status | cut -d'|' -f6
                break
            fi
        done
    fi
}


function test_raid1_repl_count
{
    local repl_count="$1"
    local family="$2"
    local oid_id="$3"

    $phobos put --family $family --layout raid1 --layout-params \
        repl_count=$repl_count /etc/hosts "oid_$family$oid_id" ||
        error "Object should be put"

    local ext_req=$($phobos extent list --degroup --output \
        address,md5,xxh128,oid,object_uuid,version,media_name \
        "oid_$family$oid_id" |
        tail -n $repl_count | sed "s/[][' ]//g" | sort -k1.8)

    for repl_id in $(seq 1 $repl_count); do
        local row="$(echo $ext_req | cut -d' ' -f${repl_id})"
        local address="$(echo $row | cut -d'|' -f2)"
        local md5="$(echo $row | cut -d'|' -f3)"
        local xxh128="$(echo $row | cut -d'|' -f4)"
        local oid="$(echo $row | cut -d'|' -f5)"
        local uuid="$(echo $row | cut -d'|' -f6)"
        local version="$(echo $row | cut -d'|' -f7)"
        local media="$(echo $row | cut -d'|' -f8)"
        local filename="$(basename $address)"
        local reconst_path="$oid.$version.r1-$repl_count""_$((repl_id-1)).$uuid"

        local media_path="$(get_media_path $repl_count $family $media)"

        [[ -f "$media_path/$address" ]] ||
            error "File does not exist"
        [[ "$reconst_path" == "$filename" ]] ||
            error "Object paths mismatch"

        local xattr_md5=$(getfattr -n user.md5 -e text --only-values \
            "$media_path/$address")
        local xattr_xxh128=$(getfattr -n user.xxh128 -e text --only-values \
            "$media_path/$address")

        hash_compare "$(echo $md5 | cut -d',' -f$repl_id)" "$xattr_md5"
        hash_compare "$(echo $xxh128 | cut -d ',' -f$repl_id)" "$xattr_xxh128"
    done
}

function test_raid1_dir
{
    for repl_count in 1 $max_repl_count; do
        test_raid1_repl_count $repl_count "dir" $repl_count
    done
}

function test_raid1_tapes
{
    for repl_count in 1 $max_repl_count; do
        test_raid1_repl_count $repl_count "tape" $repl_count
    done
}

TESTS=("dirs_setup; test_raid1_dir; cleanup")

if [[ -w /dev/changer ]]; then
    TESTS+=("tapes_setup; test_raid1_tapes; cleanup")
fi

