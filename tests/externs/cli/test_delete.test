#!/bin/bash

#
#  All rights reserved (c) 2014-2025 CEA/DAM.
#
#  This file is part of Phobos.
#
#  Phobos is free software: you can redistribute it and/or modify it under
#  the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation, either version 2.1 of the Licence, or
#  (at your option) any later version.
#
#  Phobos is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Phobos. If not, see <http://www.gnu.org/licenses/>.
#

#
# Integration test for deletion feature
#

test_dir=$(dirname $(readlink -e $0))
. $test_dir/test_env.sh
. $test_dir/setup_db.sh
. $test_dir/tape_drive.sh
. $test_dir/test_launch_daemon.sh
. $test_dir/utils_generation.sh

set -xe

function setup_dir
{
    setup_tables
    invoke_lrs

    setup_test_dirs
    setup_dummy_files 1 1k 1

    dirs=("$DIR_TEST_IN/tmp1" "$DIR_TEST_IN/tmp2" "$DIR_TEST_IN/tmp3")

    mkdir ${dirs[@]}
    $phobos dir add ${dirs[@]}
    $phobos dir format --fs posix --unlock ${dirs[@]}
}

function setup_tape
{
    setup_tables
    invoke_daemons

    setup_test_dirs
    setup_dummy_files 1 1k 1

    export drive="$(get_lto_drives 5 1)"
    export medium="$(get_tapes L5 1)"

    $phobos drive add --unlock $drive
    $phobos tape add -t lto5 $medium
    $phobos tape format --unlock $medium
}

function cleanup_dir
{
    waive_lrs

    cleanup_dummy_files
    cleanup_test_dirs

    drop_tables
}

function cleanup_tape
{
    waive_daemons

    drain_all_drives
    cleanup_dummy_files
    cleanup_test_dirs

    drop_tables
}

function test_delete
{
    local prefix=$(generate_prefix_id)

    local oid=${prefix}_id

    $phobos put --family dir "${FILES[0]}" $oid ||
        error "Object should be put"
    $valg_phobos delete $oid ||
        error "Object should be deleted"
    $phobos get $oid test_tmp &&
        error "Object should not be got"

    [ -z $($phobos object list $oid) ] ||
        error "Object should not be listed, because deleted"
    [ -z $($phobos object list --deprecated $oid) ] &&
        error "Object should be listed with the deprecated option"
    [ -z $($phobos object list --deprecated --output uuid $oid) ] &&
        error "Object should be listed with the deprecated option and "\
              "the uuid output filter"

    return 0
}

function test_dir_hard_delete
{
    local prefix=$(generate_prefix_id)_$1_$2
    local oid=${prefix}_id

    export PHOBOS_STORE_default_family="dir"
    export PHOBOS_STORE_default_layout=$1
    export PHOBOS_LAYOUT_RAID1_repl_count=$2

    $phobos put "${FILES[0]}" $oid || error "Object should be put"
    medium_list=$($phobos extent list -o media_name)
    path_list=$($phobos extent list -o address)
    $valg_phobos delete --hard $oid --version 2 &&
        error "Object should not be deleted"
    $valg_phobos delete --hard $oid --uuid aaaa-bbbb &&
        error "Object should not be deleted"
    $valg_phobos delete --hard $oid || error "Object should be deleted"
    $phobos get $oid test_tmp && error "Object should not be retrieved"

    [ -z $($phobos object list $oid) ] ||
        error "Object should not be listed, because deleted"
    [ -z $($phobos object list --deprecated $oid) ] ||
        error "Object should not be listed, because hard deleted"

    nb=$($PSQL -t -c "SELECT COUNT(*) FROM layout;")
    if [ $nb -ne 0 ]; then
        error "Hard delete should have deleted layout info"
    fi
    nb=$($PSQL -t -c "SELECT COUNT(*) FROM extent;")
    if [ $nb -ne 0 ]; then
        error "Hard delete should have deleted extent info"
    fi

    for path in $path_list; do
        path=$(echo $path | cut -d"'" -f2)
        if [ -f $path ]; then
            error "Hard delete should have deleted extent file"
        fi
    done

    for medium in $medium_list; do
        medium=$(echo $medium | cut -d"'" -f2)
        [ $($phobos dir list -o stats.nb_obj $medium) -eq 0 ] ||
            error "Hard delete should have set correct number of objects on dir"
        [ $($phobos dir list -o stats.logc_spc_used $medium) -eq 0 ] ||
            error "Hard delete should have set correct logical space on dir"
    done
}

function test_dir_hard_delete_deprec_only
{
    export PHOBOS_STORE_default_family="dir"

    $phobos put "${FILES[0]}" oid
    local uuid_gen1=$($phobos object list -o uuid oid)
    $phobos del oid
    $phobos put "${FILES[0]}" oid
    $phobos put --overwrite "${FILES[0]}" oid
    $phobos put --overwrite "${FILES[0]}" oid

    $valg_phobos delete --hard --deprecated-only oid &&
        error "Delete should have failed, several object"

    $valg_phobos delete --hard --deprecated-only oid --version 3 &&
        error "Delete should have failed, wrong version"

    $valg_phobos delete --hard --deprecated-only oid --version 1 &&
        error "Delete should have failed, several object with the same version"

    local uuid_gen2=$($phobos object list -o uuid oid)

    # Delete oid version 1 of gen 2
    $valg_phobos delete --hard --deprecated-only oid --version 1 \
        --uuid $uuid_gen2 || error "Object should be deleted"
    $phobos get oid --version 1 --uuid $uuid_gen2 test_tmp &&
        error "Object should not be retrieved"
    local res=$($phobos object list --deprecated -f csv -o version,uuid oid)
    ! echo "$res" | grep -F "1,$uuid_gen2" &&
        echo "$res" | grep -F "1,$uuid_gen1"
    res=$($phobos copy list -f csv -o version,uuid)
    ! echo "$res" | grep -F "1,$uuid_gen2" &&
        echo "$res" | grep -F "1,$uuid_gen1"

    # Delete deprecated oid of gen 2
    $valg_phobos delete --hard --deprecated-only oid --uuid $uuid_gen2 ||
        error "Object should be deleted"
    $phobos get oid --version 2 --uuid $uuid_gen2 test_tmp &&
        error "Object should not be retrieved"
    res=$($phobos object list -f csv --deprecated -o version,uuid oid)
    ! echo "$res" | grep -F "2,$uuid_gen2"
    res=$($phobos copy list -f csv -o version,uuid $uuid_gen2)
    ! echo "$res" | grep -F "2,$uuid_gen2"
}

function test_dir_hard_delete_deprec
{
    export PHOBOS_STORE_default_family="dir"

    $phobos put "${FILES[0]}" oid
    local uuid_gen1=$($phobos object list -o uuid oid)
    $phobos del oid
    $phobos put "${FILES[0]}" oid
    $phobos put --overwrite "${FILES[0]}" oid
    $phobos put --overwrite "${FILES[0]}" oid
    local uuid_gen2=$($phobos object list -o uuid oid)

    $valg_phobos delete --hard --deprecated oid --version 1 &&
        error "Delete should have failed, several object with the same version"

    # Delete an object with version (should delete the only alive object)
    $valg_phobos delete --hard --deprecated oid --version 3 ||
        error "Object should be deleted"
    $phobos get oid test_tmp && error "Object should not be retrieved"
    [ -z $($phobos object list -o version oid) ]
    local res=$($phobos copy list -f csv -o version,uuid $uuid_gen2)
    ! echo "$res" | grep -F "3,$uuid_gen2"

    # Delete an object with uuid (should delete the deprec object gen 1)
    $valg_phobos delete --hard --deprecated oid --uuid $uuid_gen1 ||
        error "Object should be deleted"
    $phobos get oid --uuid $uuid_gen1 test_tmp &&
        error "Object should not be retrieved"
    res=$($phobos object list -f csv --deprecated -o version,uuid oid)
    ! echo "$res" | grep -F "1,$uuid_gen1"
    res=$($phobos copy list -f csv -o version,uuid $uuid_gen1)
    ! echo "$res" | grep -F "1,$uuid_gen1"

    # Delete with uuid not in alive table (should delete the last version in
    # deprecated table)
    $valg_phobos delete --hard --deprecated oid --uuid $uuid_gen2 ||
        error "Object should be deleted"
    $phobos get oid --version 2 --uuid $uuid_gen2 test_tmp &&
        error "Object should not be retrieved"
    res=$($phobos object list -f csv --deprecated -o version,uuid oid)
    ! echo "$res" | grep -F "2,$uuid_gen2"
    res=$($phobos copy list -f csv -o version,uuid $uuid_gen2)
    ! echo "$res" | grep -F "2,$uuid_gen2"
}

function test_tape_hard_delete
{
    local prefix=$(generate_prefix_id)
    local oid=${prefix}_id

    $phobos put "${FILES[0]}" $oid || error "Object should be put"
    $valg_phobos delete --hard $oid || error "Object should be deleted"

    [ -z $($phobos object list $oid) ] ||
        error "Object should not be listed, because deleted"
    [ -z $($phobos object list --deprecated $oid) ] ||
        error "Object should not be listed, because hard deleted"

    nb=$($PSQL -t -c "SELECT COUNT(*) FROM layout;")
    if [ $nb -ne 0 ]; then
        error "Hard delete should have delete layout info on tape"
    fi
    nb=$($PSQL -t -c "SELECT COUNT(*) FROM extent WHERE state='orphan';")
    if [ $nb -ne 1 ]; then
        error "Hard delete should have keep the extent info on tape"
    fi
}

function test_tape_hard_delete_after_soft_delete
{
    local prefix=$(generate_prefix_id)
    local oid=${prefix}_id

    $phobos put "${FILES[0]}" $oid || error "Object should be put"
    $phobos delete $oid || error "Object should be deleted"
    $phobos put "${FILES[0]}" $oid || error "Object should be put (again)"
    $valg_phobos delete --hard $oid || error "Object should be deleted"

    [ -z $($phobos object list $oid) ] ||
        error "Object should not be listed, because deleted"
    [ -z $($phobos object list --deprecated $oid) ] &&
        error "Deprecated object should be listed, because not targeted"

    nb=$($PSQL -t -c "SELECT COUNT(*) FROM layout;")
    if [ $nb -ne 1 ]; then
        error "Hard delete should have delete layout info on tape for last oid"
    fi
    nb=$($PSQL -t -c "SELECT COUNT(*) FROM extent WHERE state='orphan';")
    if [ $nb -ne 1 ]; then
        error "Hard delete should have only set 1 extent to orphan"
    fi
    nb=$($PSQL -t -c "SELECT COUNT(*) FROM extent;")
    if [ $nb -ne 2 ]; then
        error "Hard delete should have keep extents info on tape"
    fi
}

function test_dir_hard_delete_with_copies()
{
    export PHOBOS_STORE_default_family="dir"

    local prefix=$(generate_prefix_id)
    local oid=${prefix}_id

    $phobos put "${FILES[0]}" $oid || error "Object should be put"
    $phobos copy create $oid copy-source || error "Object should be copied"

    $valg_phobos delete --hard $oid &&
        error "Phobos delete --hard should have failed"

    local count=$($phobos object list | wc -l)
    if [[ $count -ne 1 ]]; then
        error "$oid shouldn't be deleted"
    fi
    [ -z $($phobos object list -d) ] ||
        error "Deprecated object shouldn't be listed"

    count=$($phobos copy list | wc -l)
    if [[ $count -ne 2 ]]; then
        error "There should be two copies, got $count"
    fi

    count=$($phobos extent list | wc -l)
    if [[ $count -ne 2 ]]; then
        error "There should be two extents, got $count"
    fi
}

TESTS=(
    "setup_dir; test_delete; cleanup_dir"
    "setup_dir; test_dir_hard_delete raid1 1; cleanup_dir"
    "setup_dir; test_dir_hard_delete raid1 2; cleanup_dir"
    "setup_dir; test_dir_hard_delete raid4; cleanup_dir"
    "setup_dir; test_dir_hard_delete_deprec; cleanup_dir"
    "setup_dir; test_dir_hard_delete_deprec_only; cleanup_dir"
    "setup_dir; test_dir_hard_delete_with_copies; cleanup_dir"
)

if [[ -w /dev/changer ]]; then
    TESTS+=("setup_tape; test_tape_hard_delete; cleanup_tape"
            "setup_tape; test_tape_hard_delete_after_soft_delete; cleanup_tape")
fi
