#!/bin/bash

#
#  All rights reserved (c) 2014-2024 CEA/DAM.
#
#  This file is part of Phobos.
#
#  Phobos is free software: you can redistribute it and/or modify it under
#  the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation, either version 2.1 of the Licence, or
#  (at your option) any later version.
#
#  Phobos is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Phobos. If not, see <http://www.gnu.org/licenses/>.
#

#
# Integration test for put --file command
#

test_dir=$(dirname $(readlink -e $0))
. $test_dir/test_env.sh
. $test_dir/setup_db.sh
. $test_dir/test_launch_daemon.sh
. $test_dir/tape_drive.sh
. $test_dir/utils_generation.sh
. $test_dir/utils.sh

################################################################################
#                                    SETUP                                     #
################################################################################

function setup()
{
    setup_tables
    if [[ -w /dev/changer ]]; then
        invoke_daemons
    else
        invoke_lrs
    fi

    setup_test_dirs
    export PHOBOS_LRS_families="dir"
    export PHOBOS_STORE_default_family="dir"
}

function cleanup() {
    if [[ -w /dev/changer ]]; then
        waive_daemons
        drain_all_drives
    else
        waive_lrs
    fi

    drop_tables
    cleanup_test_dirs
}

function setup_sync()
{
    export PHOBOS_LRS_families="dir"
    export PHOBOS_STORE_default_family="dir"
    export PHOBOS_LRS_lock_file="$test_dir/phobosd.lock"
    EVENT_FILE="$test_dir/test_daemon_scheduling_events"

    rm -f "$PHOBOS_LRS_lock_file"

    setup_tables
    invoke_lrs_debug &
    wait_for_lrs
    last_read=$(now)
}

function cleanup_sync()
{
    rm -f "$EVENT_FILE"

    kill $(pgrep phobosd)
    drop_tables
}

function setup_dir_raid1()
{
    setup

    # Add 2 dirs to ensure that with the no-split option, we have an error when
    # we want to make a put larger than a medium while the total size available
    # is greater than the size of the put
    DIRS=(
          $(make_tmp_fs 1M)
          $(make_tmp_fs 1M)
         )

    export PHOBOS_STORE_default_layout="raid1"
    export PHOBOS_LAYOUT_RAID1_repl_count=1

    $phobos dir add ${DIRS[@]}
    $phobos dir format --unlock ${DIRS[@]}
}

function cleanup_dir()
{
    cleanup
    for dir in ${DIRS[@]}; do
        cleanup_tmp_fs $dir
    done
}

function setup_dir_raid1_sync()
{
    setup_sync

    DIR=$(make_tmp_fs 1M)

    export PHOBOS_STORE_default_layout="raid1"
    export PHOBOS_LAYOUT_RAID1_repl_count=1

    $phobos dir add $DIR
    $phobos dir format --unlock $DIR
}

function cleanup_dir_sync()
{
    cleanup_sync
    for dir in ${DIRS[@]}; do
        cleanup_tmp_fs $dir
    done
}

function setup_dir_raid1_overhead()
{
    setup

    DIRS=(
          $(make_tmp_fs 1M)
          $(make_tmp_fs 1M)
         )

    export PHOBOS_STORE_default_layout="raid1"
    export PHOBOS_LAYOUT_RAID1_repl_count=1

    $phobos dir add -T first ${DIRS[0]}
    $phobos dir add -T second ${DIRS[1]}
    $phobos dir format --unlock ${DIRS[@]}
}

function setup_2dir_raid1()
{
    setup

    # Same, add enough media so that a put with split is possible to ensure
    # that a put with the no-split option returns an error
    DIRS=(
          $(make_tmp_fs 1M)
          $(make_tmp_fs 1M)
          $(make_tmp_fs 1M)
          $(make_tmp_fs 1M)
         )

    export PHOBOS_STORE_default_layout="raid1"
    export PHOBOS_LAYOUT_RAID1_repl_count=2

    $phobos dir add ${DIRS[@]}
    $phobos dir format --unlock ${DIRS[@]}
}

function setup_dir_raid4()
{
    setup

    # Same, add enough media so that a put with split is possible to ensure
    # that a put with the no-split option returns an error
    DIRS=(
         $(make_tmp_fs 1M)
         $(make_tmp_fs 1M)
         $(make_tmp_fs 1M)
         $(make_tmp_fs 1M)
         $(make_tmp_fs 1M)
         $(make_tmp_fs 1M)
        )

    export PHOBOS_STORE_default_layout="raid4"

    $phobos dir add ${DIRS[@]}
    $phobos dir format --unlock ${DIRS[@]}
}

################################################################################
#                              TEST MPUT NO-SPLIT                              #
################################################################################

function test_mput_no_split_raid1_one_file()
{
    local files=(
                 $(mktemp $DIR_TEST_IN/test.pho.XXXX)
                 $(mktemp $DIR_TEST_IN/test.pho.XXXX)
                )

    dd if=/dev/urandom of="${files[0]}" bs=600KB count=2
    dd if=/dev/urandom of="${files[1]}" bs=600KB count=1

    local object="${files[0]} mput_no_split_oid1 -"
    echo "$object" > $DIR_TEST_OUT/mput_no_split

    $valg_phobos put -f dir --file $DIR_TEST_OUT/mput_no_split --no-split &&
         error "phobos put --file should have failed (file too big)"

    local count=$($phobos extent list --degroup | wc -l)
    if [[ $count -ne 0 ]]; then
        error "There should be no extent (got $count)"
    fi

    object="${files[1]} mput_no_split_oid1 -"
    echo "$object" > $DIR_TEST_OUT/mput_no_split

    $valg_phobos put -f dir --file $DIR_TEST_OUT/mput_no_split --no-split ||
        error "phobos put --file should have worked"

    count=$($phobos extent list --degroup | wc -l)
    if [[ $count -ne 1 ]]; then
        error "There should be one extent (got $count)"
    fi
}

function test_mput_no_split_raid1_two_file()
{
    local files=(
                 $(mktemp $DIR_TEST_IN/test.pho.XXXX)
                 $(mktemp $DIR_TEST_IN/test.pho.XXXX)
                 $(mktemp $DIR_TEST_IN/test.pho.XXXX)
                 $(mktemp $DIR_TEST_IN/test.pho.XXXX)
                )
    # Two files bigger than the medium
    dd if=/dev/urandom of="${files[0]}" bs=600KB count=1
    dd if=/dev/urandom of="${files[1]}" bs=600KB count=1

    local objects=("${files[0]} mput_no_split_oid1 -"
                   "${files[1]} mput_no_split_oid2 -")
    echo "${objects[0]}
          ${objects[1]}" > $DIR_TEST_OUT/mput_no_split

    $valg_phobos put -f dir --file $DIR_TEST_OUT/mput_no_split --no-split &&
        error "phobos put --file should have failed"

    local count=$($phobos extent list --degroup | wc -l)
    if [[ $count -ne 0 ]]; then
        error "There should no extent (got $count)"
    fi

    # Two files smaller than the medium
    dd if=/dev/urandom of="${files[2]}" bs=200KB count=1
    dd if=/dev/urandom of="${files[3]}" bs=200KB count=1

    objects=("${files[2]} mput_no_split_oid1 -"
             "${files[3]} mput_no_split_oid2 -")
    echo "${objects[0]}
          ${objects[1]}" > $DIR_TEST_OUT/mput_no_split

    $valg_phobos put -f dir --file $DIR_TEST_OUT/mput_no_split --no-split ||
        error "phobos put --file should have worked"

    count=$($phobos extent list --degroup | wc -l)
    if [[ $count -ne 2 ]]; then
        error "There should be two extents (got $count)"
    fi
}

function test_mput_no_split_raid1_repl_one_file()
{
    local files=(
                 $(mktemp $DIR_TEST_IN/test.pho.XXXX)
                 $(mktemp $DIR_TEST_IN/test.pho.XXXX)
                )

    dd if=/dev/urandom of="${files[0]}" bs=600KB count=2
    dd if=/dev/urandom of="${files[1]}" bs=600KB count=1

    local object="${files[0]} mput_no_split_oid1 -"
    echo "$object" > $DIR_TEST_OUT/mput_no_split

    $valg_phobos put --file $DIR_TEST_OUT/mput_no_split --no-split &&
         error "phobos put --file should have failed (file too big)"

    local count=$($phobos extent list --degroup | wc -l)
    if [[ $count -ne 0 ]]; then
        error "There should be no extent (got $count)"
    fi

    object="${files[1]} mput_no_split_oid1 -"
    echo "$object" > $DIR_TEST_OUT/mput_no_split

    $valg_phobos put --file $DIR_TEST_OUT/mput_no_split --no-split ||
        error "phobos put --file should have worked"

    local media_extents=$($phobos extent list --degroup -o media_name | sort)
    count=$(echo "$media_extents" | wc -l)
    if [[ $count -ne 2 ]]; then
        error "There should be two extents (got $count)"
    fi
}

function test_mput_no_split_raid1_repl_two_file()
{
    local files=(
                 $(mktemp $DIR_TEST_IN/test.pho.XXXX)
                 $(mktemp $DIR_TEST_IN/test.pho.XXXX)
                 $(mktemp $DIR_TEST_IN/test.pho.XXXX)
                 $(mktemp $DIR_TEST_IN/test.pho.XXXX)
                )
    # Two files bigger than the medium
    dd if=/dev/urandom of="${files[0]}" bs=600KB count=1
    dd if=/dev/urandom of="${files[1]}" bs=600KB count=1

    local objects=("${files[0]} mput_no_split_oid1 -"
                   "${files[1]} mput_no_split_oid2 -")
    echo "${objects[0]}
          ${objects[1]}" > $DIR_TEST_OUT/mput_no_split

    $valg_phobos put --file $DIR_TEST_OUT/mput_no_split --no-split &&
        error "phobos put --file should have failed"

    local count=$($phobos extent list --degroup | wc -l)
    if [[ $count -ne 0 ]]; then
        error "There should no extent (got $count)"
    fi

    # Two files smaller than the medium
    dd if=/dev/urandom of="${files[2]}" bs=200KB count=1
    dd if=/dev/urandom of="${files[3]}" bs=200KB count=1

    objects=("${files[2]} mput_no_split_oid1 -"
             "${files[3]} mput_no_split_oid2 -")
    echo "${objects[0]}
          ${objects[1]}" > $DIR_TEST_OUT/mput_no_split

    $valg_phobos put --file $DIR_TEST_OUT/mput_no_split --no-split ||
        error "phobos put --file should have worked"

    count=$($phobos extent list --degroup | wc -l)
    if [[ $count -ne 4 ]]; then
        error "There should be four extents (got $count)"
    fi
}

function test_mput_no_split_raid4_one_file()
{
    local files=(
                 $(mktemp $DIR_TEST_IN/test.pho.XXXX)
                 $(mktemp $DIR_TEST_IN/test.pho.XXXX)
                )

    # Each half should be larger than 1M (expected fail)
    dd if=/dev/urandom of="${files[0]}" bs=600KB count=4
    # Each half should be smaller than 1M (expected success)
    dd if=/dev/urandom of="${files[1]}" bs=600KB count=1

    local object="${files[0]} mput_no_split_oid1 -"
    echo "$object" > $DIR_TEST_OUT/mput_no_split

    $valg_phobos put --file $DIR_TEST_OUT/mput_no_split --no-split &&
         error "phobos put --file should have failed (file too big)"

    local count=$($phobos extent list --degroup | wc -l)
    if [[ $count -ne 0 ]]; then
        error "There should be no extent (got $count)"
    fi

    object="${files[1]} mput_no_split_oid1 -"
    echo "$object" > $DIR_TEST_OUT/mput_no_split

    $valg_phobos put --file $DIR_TEST_OUT/mput_no_split --no-split ||
        error "phobos put --file should have worked"

    local media_extents=$($phobos extent list --degroup -o media_name | sort)
    count=$(echo "$media_extents" | wc -l)
    if [[ $count -ne 3 ]]; then
        error "There should be 3 extents (got $count)"
    fi
}

function test_mput_no_split_raid4_two_file()
{
    local files=(
                 $(mktemp $DIR_TEST_IN/test.pho.XXXX)
                 $(mktemp $DIR_TEST_IN/test.pho.XXXX)
                 $(mktemp $DIR_TEST_IN/test.pho.XXXX)
                 $(mktemp $DIR_TEST_IN/test.pho.XXXX)
                )

    # Sum of each half should be larger than 1M (expected fail)
    dd if=/dev/urandom of="${files[0]}" bs=600KB count=2
    dd if=/dev/urandom of="${files[1]}" bs=600KB count=2

    local objects=("${files[0]} mput_no_split_oid1 -"
                   "${files[1]} mput_no_split_oid2 -")
    echo "${objects[0]}
          ${objects[1]}" > $DIR_TEST_OUT/mput_no_split

    $valg_phobos put --file $DIR_TEST_OUT/mput_no_split --no-split &&
        error "phobos put --file should have failed"

    local count=$($phobos extent list --degroup | wc -l)
    if [[ $count -ne 0 ]]; then
        error "There should no extent (got $count)"
    fi

    # Sum of each half should be smaller than 1M (expected success)
    dd if=/dev/urandom of="${files[2]}" bs=600KB count=1
    dd if=/dev/urandom of="${files[3]}" bs=600KB count=1

    objects=("${files[2]} mput_no_split_oid1 -"
             "${files[3]} mput_no_split_oid2 -")
    echo "${objects[0]}
          ${objects[1]}" > $DIR_TEST_OUT/mput_no_split

    $valg_phobos put --file $DIR_TEST_OUT/mput_no_split --no-split ||
        error "phobos put --file should have worked"

    local media_extents=$($phobos extent list --degroup -o media_name | sort)
    count=$(echo "$media_extents" | wc -l)
    if [[ $count -ne 6 ]]; then
        error "There should be 6 extents (got $count)"
    fi
}

################################################################################
#                              SYNC THRESHOLD                                  #
################################################################################

function test_threshold_raid1()
{
    local files=(
                 $(mktemp $DIR_TEST_IN/test.pho.XXXX)
                 $(mktemp $DIR_TEST_IN/test.pho.XXXX)
                )

    dd if=/dev/urandom of="${files[0]}" bs=200KB count=1
    dd if=/dev/urandom of="${files[1]}" bs=200KB count=1

    objects=("${files[0]} mput_no_split_oid1 -"
             "${files[1]} mput_no_split_oid2 -")
    echo "${objects[0]}
          ${objects[1]}" > $DIR_TEST_OUT/mput_no_split

    last_read=$(now)

    $valg_phobos put --file $DIR_TEST_OUT/mput_no_split --no-split ||
        error "phobos put --file should have worked"

    local res=$(get_daemon_event "sync" $last_read)
    last_read=$(now)
    local count=$(echo "$res" | wc -l)
    if [[ $count -ne 2 ]]; then
        error "There should be 2 sync (got $count)"
    fi

    local nb_obj=$($phobos dir list -o stats.nb_obj)
    local nb_written=$($phobos dir list -o stats.logc_spc_used)

    if [[ $nb_obj -ne 2 ]]; then
        error "There should be 2 objects (got $nb_obj)"
    fi

    if [[ $nb_written -ne $((400 * 1000)) ]]; then
        error "There should be $((400 * 1000)) bytes (got $nb_written)"
    fi
}

function test_threshold_req_raid1()
{
    export PHOBOS_LRS_sync_time_ms="dir=60000"
    export PHOBOS_LRS_sync_nb_req="dir=1"
    export PHOBOS_LRS_sync_wsize_kb="dir=100000000000"

    test_threshold_raid1
}

function test_threshold_wsize_raid1()
{
    export PHOBOS_LRS_sync_time_ms="dir=60000"
    export PHOBOS_LRS_sync_nb_req="dir=100"
    export PHOBOS_LRS_sync_wsize_kb="dir=200000"

    test_threshold_raid1
}

function test_threshold_time_raid1()
{
    export PHOBOS_LRS_sync_time_ms="dir=1"
    export PHOBOS_LRS_sync_nb_req="dir=100"
    export PHOBOS_LRS_sync_wsize_kb="dir=1000000000000"

    test_threshold_raid1
}

################################################################################
#                              TESTS OVERHEAD                                  #
################################################################################

function test_overhead()
{
    local files=(
                 $(mktemp $DIR_TEST_IN/test.pho.XXXX)
                 $(mktemp $DIR_TEST_IN/test.pho.XXXX)
                )

    local dev=$(df --output=source ${DIRS[1]} | tail -n1)
    local block_size=$(blockdev --getbsz $dev)
    local size=$($phobos dir list -o stats.phys_spc_free ${DIRS[0]})
    local file_size=$(($size / 2))

    # Write 2 files of the total size available on the medium
    dd if=/dev/urandom of="${files[0]}" bs=$file_size count=1
    dd if=/dev/urandom of="${files[1]}" bs=$file_size count=1

    objects=("${files[0]} mput_no_split_oid1 -"
             "${files[1]} mput_no_split_oid2 -")
    echo "${objects[0]}
          ${objects[1]}" > $DIR_TEST_OUT/mput_no_split

    export PHOBOS_LRS_sync_time_ms="dir=60000"
    export PHOBOS_LRS_sync_nb_req="dir=1"
    export PHOBOS_LRS_sync_wsize_kb="dir=100000000000"

    export PHOBOS_IO_fs_block_size="dir=$block_size"

    # With the overhead, should failed with no space
    set +e
    ENOSPC=28
    output=$($valg_phobos put -T first --file $DIR_TEST_OUT/mput_no_split \
             --no-split 2>&1)
    rc=$?
    if [[ $rc -ne $ENOSPC ]]; then
        error "phobos put --file should have failed with ENOSPC"
    fi
    set -e

    unset PHOBOS_IO_fs_block_size
    # Without the overhead at the alloc, should write but last sync should
    # failed
    set +e
    output=$($valg_phobos put -T first --file $DIR_TEST_OUT/mput_no_split \
             --no-split 2>&1)
    rc=$?
    if [[ $rc -eq 0 ]]; then
        error "phobos put --file should have failed"
    fi
    set -e
    echo "$output" | grep "received error release to last request"

    # Remove the overhead added at the alloc
    local nb_blocks=$(((($size + ($block_size - 1)) / $block_size) - 3 * 2))
    file_size=$(($nb_blocks / 2))
    dd if=/dev/urandom of="${files[0]}" bs=$block_size count=$file_size
    dd if=/dev/urandom of="${files[1]}" bs=$block_size count=$file_size

    export PHOBOS_IO_fs_block_size="dir=$block_size"
    # With the overhead at the alloc, should succeed with no space left on
    # medium
    $valg_phobos put -T second --file $DIR_TEST_OUT/mput_no_split --no-split ||
        error "phobos put --file should have worked"

    local count=$($phobos extent list --degroup | wc -l)
    if [[ $count -ne 2 ]]; then
        error "There should be two extents (got $count)"
    fi

    local phys_spc_free=$($phobos dir list -o stats.phys_spc_free ${DIRS[1]})
    if [[ $phys_spc_free -ne 0 ]]; then
        error "There should be no space left (got $phys_spc_free)"
    fi
}

################################################################################
#                              RAID1                                           #
################################################################################

TESTS=("setup_dir_raid1; test_mput_no_split_raid1_one_file; cleanup_dir"
       "setup_dir_raid1; test_mput_no_split_raid1_two_file; cleanup_dir"
       "setup_2dir_raid1; \
            test_mput_no_split_raid1_repl_one_file; \
        cleanup_dir"
       "setup_2dir_raid1; \
            test_mput_no_split_raid1_repl_two_file; \
        cleanup_dir"
       "setup_dir_raid1_sync; \
            test_threshold_req_raid1; \
        cleanup_dir_sync"
       "setup_dir_raid1_sync; \
            test_threshold_wsize_raid1; \
        cleanup_dir_sync"
       "setup_dir_raid1_sync; \
            test_threshold_time_raid1; \
        cleanup_dir_sync"
       "setup_dir_raid1_overhead; \
            test_overhead; \
        cleanup_dir")

################################################################################
#                              RAID4                                           #
################################################################################

TESTS+=("setup_dir_raid4; test_mput_no_split_raid4_one_file; cleanup_dir"
        "setup_dir_raid4; test_mput_no_split_raid4_two_file; cleanup_dir")
