Description: layout management module

C library: libpho_layout

This abstraction layer handles requests from the store engine, where we want
to read or write objects with diverse layouts. It combines the competing
queries to do clever LRS allocations and to schedule proper data access
(layout composition). Thus this layer lives between store and LRS.

Layouts are implemented as vectors of operations which are manipulated by a
generic code structure (declaration, allocation, scatter/gather I/O,
finalize). We call this generic interface "Generic Layout Interface" (GLI).


= Combining requests =
In the case of an MPUT, multiple layouts (potentially of different kinds) have
to be combined to allocate resources efficiently and benefit from batching.

The layout code will aggregate layout declarations. For each layout, data is
split into k blocks that are expected to reside on k different media. The goal
is to fulfill the conditions and allocate as few resources as possible.

== Requests combination example ==
1: distribution (RAID0)
A -> [RAID0] -> {A0, A1, A2}
B -> [RAID0] -> {B0, B1, B2}
|_ alloc     => {C0, C1, C2}

A -> [RAID0] -> {A0, A1, A2}
B -> [RAID1] -> {B0, B1}
|_ alloc     => {C0, C1, C2}

Note that no complex scheduling happens here, it is simply a way to express
the storage requirements to the LRS layer, which will be in turn responsible
for any optimisation. First version will not handle composition of different
layouts but of multiple objects using a same layout only.

= Limitations =
We will face situations where the combination of requests exceeds the capacity
of each available media. Note that this is also valid in the case of a unique
request with a simple layout. The first proposed version will not handle this
situation and will return an error. Future versions may try advanced
algorithms to fragment the allocations in whatever fashion they believe is
clever and retry.

= Architecture =
Because advanced layouts may introduce heavy dependencies, layouts will be
implemented as plugins and distributed as shared object libraries (.so) loaded
dynamically. Available ones (listed in configuration) will be loaded on
demand and requests for missing layouts will fail with -ENOSYS.


= Interfaces =
== Plugins management ==
- Load/Release a layout implementation
    layout_register(<in:layout library path>, <out:layout class>)
    layout_deregister(<in/out:layout class>)

Loaded plugins are accessible by name (libraries need to provide unique
names) within the processus address space. A layout class implements and
exposes the layout composition and GLI interfaces.

== Layout composition ==
- Express storage needs. phobos store invokes this method for each object to
  manipulate, with the appropriate layout to prepare request composition:
    layout_intent_declare()

- Resource allocation. Once all layouts have been declared, the compositor is
  able to issue LRS calls to request the desired resources. It also calls the
  gli_initialize() method of the declared layout of each object.
  layout_allocate()

- Data operation. Iterates over the gli_{get,put} method of the declared
  layouts for each object to perform actual data transfer (using the
  appropriate IO adapters).
    layout_io_submit()

- Commit / release resources. Calls gli_finalize() for each object.
    layout_finalize()

== GLI ==
- Setup intial structures and private resources:
    gli_initialize()

- Retrieve data from media:
    gli_get()

- Push data onto media:
    gli_put()

- Commit open transactions and release allocated resources:
    gli_finalize()
