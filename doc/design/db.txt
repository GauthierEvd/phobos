SCHEMA DE METADONNEES

Object store metadata
=====================

object: oid, uuid, version, user_md (pk: oid)
        oid: identifiant de l'objet
        uuid: unique identifier to distinguish different generations of the same
              oid
        version: unique identifier inside the same uuid, from 1 to n
        user_md: blob de metadonnees utilisateur (json)

deprecated_object: oid, uuid, version, user_md, deprec_time (pk: uuid, version)
        deprec_time: date of migration from object to deprecated_object table

extents: oid, uuid, version, state, lyt_info, extents (pk: (uuid, version))
	state: ('pending', 'sync', 'orphan')
	lyt_info (objet json): parametres specifique au layout
           ex. pour 'simple': vide
               pour 'raid0': {"strp_cnt":"2","strp_sz":"1048576"})
	extents: list ordonnee d'objets json
          (ex.  [{"media":"G00042","addr":"XXXXXX","sz":"215841651"},
	         {"media":"G00048","addr":"XXXXXX","sz":"215841638"}])

index sur les media via une fonction d'extraction http://www.postgresql.org/message-id/CAONrwUFOtnR909gs+7UOdQQB12+pXsGUYu5YHPtbQk5vaE9Gaw@mail.gmail.com

Storage resources metadata
==========================

device: id, family, model, host, adm_status (pk: id)
        id: identifiant unique de device (ex: serial number)
	family: disk/tape
        model: modele de device (ex. ULTRIUM-TD6)
        host: machine sur lequel le device est accessible
        adm_status: locked/unlocked
        path: chemin par lequel le device est actuellement accessible
      	changer_idx: index designant l'adresse SCSI du device (pour les librairies)
 v0+:
        state: free/loaded/mounted
        state_info: media_id s'il est loaded, fs_path si le FS est monté...
        resv_info: informations de reservation du device (pour la gestion des cas de crash)
            - date de prise/mise a jour de reservation
            - identifiant du processus ayant effectue la reservation (/!\ fork de commandes)
	host/path: json avec les machineS : {host: 'toto', path: 'path'}, {..}, ...
    informations geree en memoire en v00, et récupérée à chaque opération: path, scsi_idx, state, state_info
        state: free/loaded (media)/mounted (media)

media: id, family, model, adm_status, fs_status, format, vol_used, vol_free (pk: id)
    id: identifiant unique du media (ex: label)
    family: type de media (dir, tape, disk, ...).
    model: type de media (ex. LTO5)
    adm_status: status operationnel: ready, failed, locked...
    fs_status: status du filesystem: blank (non formatté), empty (formatté), used (contient des données),
                     full (ne peut plus recevoir de données)...
    format: type de filesystem ou de format de données
    nb_obj: nombre d'objets sur le media
    vol_used: volume utilise sur le media
    vol_free: volume disponible sur le media (estimation)

APPELS D'ACCES AUX METADONNEES

Object store:
    obj_get(in: object_id, bitmask, out: info_struct)
        renvoie les informations sur un objet.
        bitmask indique le type d'information que l'on souhaite recuperer (metadonnees utilisateur, layout, liste des extents...)
    obj_set(in: object_id, info_struct, flags)
        cree/met a jour un objet en y associant les informations passees en parametre
        flags: create, update... Indique si l'objet doit etre créé, mis à jour...
    extent_ls(in: media, out: extent_list)
        liste les extents presents sur un media

Storage resources:
    dev_get(in: id, out: dev_info)
        renvoie les informations sur un device.
    dev_set(in: id, info_struct, flags)
        cree un device, ou met a jour ses informations.
        flags: create, update... Indique si le device doit etre créé, mis à jour...
    dev_ls(criteria)
        liste les devices selon un ou plusieurs criteres (family, status, ...)


    media_get(in: id, out: media_info)
        renvoie les informations sur un media.
    media_set(in: id, info_struct, flags)
        cree un media, ou met a jour ses informations.
        flags: create, update... Indique si le media doit etre créé, mis à jour...
    media_ls(criteria)
        liste les media selon un ou plusieurs criteres (type, status, ...)

    Exemple de recherche avec critere:
    liste des bandes ayant (vol_free >= 10G) triée par vol_free croissant.
