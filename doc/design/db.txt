SCHEMA DE METADONNEES

Object store metadata
=====================

object: oid, user_md, st_md (pk: oid)
        oid: identifiant de l'objet
        user_md: blob de metadonnees utilisateur (json)
        st_md: bloc de metadonnees de stockage (json), incluant une description de layout (ex. RAID0,<stripe_count>,<stripe_size>)

extent: oid, layout_idx, media, address, size (pk: oid, layout_idx; indexed: media)
        oid: identifiant de l'objet
        layout_info: index de l'element dans le layout (ex. stripe index)
        media: media contenant la donnee
        address: localisation sur le media contenant la donnee (ex. identifiant, ou hash, ou chemin...)
        size: taille de donnees contenues dans l'extent

Storage resources metadata
==========================

device: type, id, host, adm_status (pk: <type, id>)
        type: type de device (ex. LTO6)
        id: identifiant unique de device (ex: serial number)
        host: machine sur lequel le device est accessible
        adm_status: locked/unlocked

        v0+:
        state: free/loaded/mounted
        state_info: media_id s'il est loaded, fs_path si le FS est monté...
        resv_info: informations de reservation du device (pour la gestion des cas de crash)
            - date de prise/mise a jour de reservation
            - identifiant du processus ayant effectue la reservation (/!\ fork de commandes)
            ...

    informations geree en memoire en v00, et récupérée à chaque opération: path, scsi_idx, state, state_info
        path: chemin par lequel le device est actuellement accessible (non persistent)
        scsi_id: index designant le device dans mtx (non persistent)
        state: free/loaded (media)/mounted (media)

media: type, id, adm_status, fs_status, format, vol_used, vol_free (pk: <type, id>)
    type: type de media (ex. LTO5)
    id: identifiant du media (ex: label)
    adm_status: status operationnel: ready, failed, locked...
    fs_status: status du filesystem: blank (non formatté), empty (formatté), used (contient des données),
                     full (ne peut plus recevoir de données)...
    format: type de filesystem ou de format de données
    nb_obj: nombre d'objets sur le media
    vol_used: volume utilise sur le media
    vol_free: volume disponible sur le media (estimation)

APPELS D'ACCES AUX METADONNEES

Object store:
    obj_get(in: object_id, bitmask, out: info_struct)
        renvoie les informations sur un objet.
        bitmask indique le type d'information que l'on souhaite recuperer (metadonnees utilisateur, layout, liste des extents...)
    obj_set(in: object_id, info_struct, flags)
        cree/met a jour un objet en y associant les informations passees en parametre
        flags: create, update... Indique si l'objet doit etre créé, mis à jour...
    extent_ls(in: media, out: extent_list)
        liste les extents presents sur un media

Storage resources:
    dev_get(in: <type, id>, out: dev_info)
        renvoie les informations sur un device.
    dev_set(in: <type, id>, info_struct, flags)
        cree un device, ou met a jour ses informations.
        flags: create, update... Indique si le device doit etre créé, mis à jour...
    dev_ls(criteria)
        liste les devices selon un ou plusieurs criteres (type, status, ...)


    media_get(in: <type, id>, out: media_info)
        renvoie les informations sur un media.
    media_set(in: <type, id>, info_struct, flags)
        cree un media, ou met a jour ses informations.
        flags: create, update... Indique si le media doit etre créé, mis à jour...
    media_ls(criteria)
        liste les media selon un ou plusieurs criteres (type, status, ...)

    Exemple de recherche avec critere:
    liste des bandes ayant (vol_free >= 10G) triée par vol_free croissant.
