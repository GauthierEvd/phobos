/* -*- mode: c; c-basic-offset: 4; indent-tabs-mode: nil; -*-
 * vim:expandtab:shiftwidth=4:tabstop=4:
 */
/*
 *  All rights reserved (c) 2014-2020 CEA/DAM.
 *
 *  This file is part of Phobos.
 *
 *  Phobos is free software: you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 2.1 of the License, or
 *  (at your option) any later version.
 *
 *  Phobos is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with Phobos. If not, see <http://www.gnu.org/licenses/>.
 */
/**
 * \brief   Protobuf file for common structures.
 */

/** Resource family. */
enum PhoResourceFamily {
    FM_DISK = 0;    // Disk.
    FM_TAPE = 1;    // Tape.
    FM_DIR  = 2;    // Directory.
}

/** Resource identifier. */
message PhoResourceId {
    required PhoResourceFamily family = 1; // Family type.
    required string name              = 2; // Resource name.
}

/** Notify operation. */
enum PhoNotifyOp {
    OP_DEV_ADD    = 0;  // Device add operation.
    OP_DEV_LOCK   = 1;  // Device lock operation.
    OP_DEV_UNLOCK = 2;  // Device unlock operation.
}

/** Selected filesystem type for a medium. */
enum PhoFsType {
    FS_POSIX = 0;       // POSIX filesystem (no specific feature).
    FS_LTFS  = 1;       // LTFS (Linear Tape File System).
}

/** Selected address type for a medium. */
enum PhoAddressType {
    AD_PATH   = 0;      // ID is entry path (e.g. for imported tapes). */
    AD_HASH1  = 1;      // ID hashing, implementation 1. */
    AD_OPAQUE = 2;      // Opaque identifier provided by the backend. */
}

/** LRS request kind (used in PhoResponse). */
enum PhoRequestKind {
    RQ_WRITE   = 0;     // Media allocation with write ability.
    RQ_READ    = 1;     // Media allocation with read ability.
    RQ_RELEASE = 2;     // Media release and flush. The IO is considered
                        // complete once the release and flush are done.
    RQ_FORMAT  = 3;     // Medium format.
    RQ_NOTIFY  = 4;     // LRS notification to reload device/medium information.
}

