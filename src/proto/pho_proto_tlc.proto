/* -*- mode: c; c-basic-offset: 4; indent-tabs-mode: nil; -*-
 * vim:expandtab:shiftwidth=4:tabstop=4:
 */
/*
 *  All rights reserved (c) 2014-2023 CEA/DAM.
 *
 *  This file is part of Phobos.
 *
 *  Phobos is free software: you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 2.1 of the License, or
 *  (at your option) any later version.
 *
 *  Phobos is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with Phobos. If not, see <http://www.gnu.org/licenses/>.
 */
/**
 * \brief   Protobuf file for TLC request/reply protocol.
 */

syntax = "proto2";

/** TLC protocol request, emitted by layout modules. */
message PhoTlcRequest {
    /** Body of drive lookup request */
    message DriveLookup {
        required string serial = 1; // Serial number of the drive to lookup
    }

    /** Body of the tlc load request */
    message Load {
        required string drive_serial = 1;   // Serial number of the target drive
        required string tape_label = 2;     // Medium label to load
    }

    /** Body of the tlc unload request */
    message Unload {
        required string drive_serial = 1;   // Serial number of the target drive
        optional string tape_label = 2;     // Medium label to unload from drive
    }

    /** Body of the tlc status request */
    message Status {
        optional bool reload = 1;   // If true, status cache is reloaded before
                                    // building the response
    }

    required uint32 id  = 1;    // Request ID to match its future response.

    optional bool ping  = 2;    // Is the request a ping one ?
    optional DriveLookup drive_lookup = 3;  // Drive lookup body
    optional Load load = 4;     // Load body
    optional Unload unload = 5; // Unload body
    optional Status status = 6; // Status body
    optional bool reload = 7;   // Is the request a reload one ?
}

/** TLC protocol response, emitted by the TLC. */
message PhoTlcResponse {
    /** Body of the ping response. */
    message Ping {
        required bool library_is_up = 1; // True if the TLC could successfully
                                         // contact the library. False,
                                         // otherwise
    }

    /** Body of drive lookup response. */
    message DriveLookup {
        required uint64 address = 1;    // Address of the drive in lib
        required uint64 first_address = 2;  // Address of the first drive in
                                            // lib
        optional string medium_name = 3; // Loaded medium name (if any)
    }

    /** Body of error response */
    message Error {
        required int32 rc = 1;  // Error code, -errno for homogeneity.
        optional string message = 2; // JSON message describing the error
    }

    /** Body of load response */
    message Load {
        optional string message = 1; // JSON message describing the load
    }

    /** Body of unload response */
    message Unload {
        required string tape_label = 1; // Unloaded tape label
        required uint64 addr = 2;       // Library addr where tape was unloaded
        optional string message = 3;    // JSON message describing the unload
    }

    /* Body of status response */
    message Status {
        required string lib_data = 1; // JSON array describing the library
        optional string message = 2;  // JSON message describing the status
    }

    required uint32 req_id = 1; // Request ID, to be matched with
                                // the corresponding request.

    optional Ping ping = 2;     // Ping body
    optional DriveLookup drive_lookup = 3;  // Drive lookup response body
    optional Error error = 4;   // Error body
    optional Load load = 5;     // Load body
    optional Unload unload = 6; // Unload body
    optional Status status = 7; // Status body
    optional bool reload = 8;   // This response is a successful reload one
}
